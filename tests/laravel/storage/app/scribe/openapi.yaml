openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
tags:
  -
    name: 'Page comments'
    description: ''
  -
    name: Pages
    description: ''
  -
    name: Roles
    description: ''
  -
    name: 'User configs'
    description: ''
  -
    name: Users
    description: ''
  -
    name: 'User statuses'
    description: ''
components:
  schemas:
    pages:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: pages
              enum:
                - pages
            attributes:
              type: object
              properties:
                title:
                  type: string
                  example: 'JSON:API standard'
                content:
                  type: string
                  example: '<strong>JSON:API</strong>'
            relationships:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: users
                          enum:
                            - users
                pageComments:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: pageComments
                          enum:
                            - pageComments
    pageComments:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: pageComments
              enum:
                - pageComments
            attributes:
              type: object
              properties:
                content:
                  type: string
                  example: '<span>It is mine comment</span>'
            relationships:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: users
                          enum:
                            - users
                page:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: pages
                          enum:
                            - pages
    users:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: users
              enum:
                - users
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'testing user1'
                email:
                  type: string
                  example: test1email@test.com
            meta:
              type: object
              properties:
                random:
                  type: string
                  example: 'testing user1vytx6lSZ'
            relationships:
              type: object
              properties:
                status:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: userStatuses
                          enum:
                            - userStatuses
                roles:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: roles
                          enum:
                            - roles
    userStatuses:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: userStatuses
              enum:
                - userStatuses
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: Active
    roles:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: roles
              enum:
                - roles
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: Root
    userConfigs:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: userConfigs
              enum:
                - userConfigs
            attributes:
              type: object
              properties:
                theme:
                  type: string
                  example: light
                notificationsEnabled:
                  type: boolean
                  example: true
                language:
                  type: string
                  example: en
            relationships:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: users
                          enum:
                            - users
paths:
  '/pageComments/{id}':
    get:
      summary: 'Show Page comment'
      operationId: showPageComment
      description: 'Retrieve a specific Page comment by ID.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pageComments
                    id: 00000000-0000-0000-0000-000000000001
                    attributes:
                      content: '<span>It is mine comment</span>'
                    links:
                      self: /pageComments/00000000-0000-0000-0000-000000000001
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pageComments
                      id:
                        type: string
                        example: 00000000-0000-0000-0000-000000000001
                      attributes:
                        type: object
                        properties:
                          content:
                            type: string
                            example: '<span>It is mine comment</span>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pageComments/00000000-0000-0000-0000-000000000001
      tags:
        - 'Page comments'
      security: []
    patch:
      summary: 'Update Page comment'
      operationId: updatePageComment
      description: 'Update a specific Page comment by ID.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pageComments
                    id: 00000000-0000-0000-0000-000000000001
                    attributes:
                      content: '<span>It is mine comment</span>'
                    links:
                      self: /pageComments/00000000-0000-0000-0000-000000000001
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pageComments
                      id:
                        type: string
                        example: 00000000-0000-0000-0000-000000000001
                      attributes:
                        type: object
                        properties:
                          content:
                            type: string
                            example: '<span>It is mine comment</span>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pageComments/00000000-0000-0000-0000-000000000001
      tags:
        - 'Page comments'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        content:
                          type: string
                          description: 'Must not be greater than 1023 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
                        page:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Pages.'
                              example:
                                id: '1'
                                type: pages
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
    delete:
      summary: 'Delete Page comment'
      operationId: deletePageComment
      description: 'Delete a specific Page comment by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Page comments'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pageComments' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/pageComments/{id}/user':
    get:
      summary: 'Show related User'
      operationId: showRelatedUser
      description: 'Retrieve the related User for a specific Page comment.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'Page comments'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pageComments' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/pageComments/{id}/page':
    get:
      summary: 'Show related Page'
      operationId: showRelatedPage
      description: 'Retrieve the related Page for a specific Page comment.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        attributes:
                          title: 'JSON:API standard'
                          content: '<strong>JSON:API</strong>'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          attributes:
                            type: object
                            properties:
                              title:
                                type: string
                                example: 'JSON:API standard'
                              content:
                                type: string
                                example: '<strong>JSON:API</strong>'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        attributes:
                          title: 'JSON:API standard'
                          content: '<strong>JSON:API</strong>'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          attributes:
                            type: object
                            properties:
                              title:
                                type: string
                                example: 'JSON:API standard'
                              content:
                                type: string
                                example: '<strong>JSON:API</strong>'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
      tags:
        - 'Page comments'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pageComments' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/pageComments/{id}/relationships/user':
    get:
      summary: 'Show User relationship'
      operationId: showUserRelationship
      description: 'Retrieve the identifier of the related User for a specific Page comment.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'Page comments'
      security: []
    patch:
      summary: 'Update User relationship'
      operationId: updateUserRelationship
      description: 'Update the related User identifier for a specific Page comment.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'Page comments'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Users.'
                  example:
                    -
                      id: '1'
                      type: users
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pageComments' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/pageComments/{id}/relationships/page':
    get:
      summary: 'Show Page relationship'
      operationId: showPageRelationship
      description: 'Retrieve the identifier of the related Page for a specific Page comment.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
      tags:
        - 'Page comments'
      security: []
    patch:
      summary: 'Update Page relationship'
      operationId: updatePageRelationship
      description: 'Update the related Page identifier for a specific Page comment.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: pages
                        id: '1'
                        links:
                          self: /pages/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: pages
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /pages/1
      tags:
        - 'Page comments'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Pages.'
                  example:
                    -
                      id: '1'
                      type: pages
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pageComments' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  /pageComments:
    get:
      summary: 'List Page comments'
      operationId: listPageComments
      description: 'Retrieve a list of Page comments.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `content`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: pageComments
                      id: 00000000-0000-0000-0000-000000000001
                      attributes:
                        content: '<span>It is mine comment</span>'
                      links:
                        self: /pageComments/00000000-0000-0000-0000-000000000001
                    -
                      type: pageComments
                      id: 00000000-0000-0000-0000-000000000002
                      attributes:
                        content: '<span>I know better</span>'
                      links:
                        self: /pageComments/00000000-0000-0000-0000-000000000002
                    -
                      type: pageComments
                      id: 00000000-0000-0000-0000-000000000003
                      attributes:
                        content: '<span>I think he is right</span>'
                      links:
                        self: /pageComments/00000000-0000-0000-0000-000000000003
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: pageComments
                        id: 00000000-0000-0000-0000-000000000001
                        attributes:
                          content: '<span>It is mine comment</span>'
                        links:
                          self: /pageComments/00000000-0000-0000-0000-000000000001
                      -
                        type: pageComments
                        id: 00000000-0000-0000-0000-000000000002
                        attributes:
                          content: '<span>I know better</span>'
                        links:
                          self: /pageComments/00000000-0000-0000-0000-000000000002
                      -
                        type: pageComments
                        id: 00000000-0000-0000-0000-000000000003
                        attributes:
                          content: '<span>I think he is right</span>'
                        links:
                          self: /pageComments/00000000-0000-0000-0000-000000000003
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: pageComments
                        id:
                          type: string
                          example: 00000000-0000-0000-0000-000000000001
                        attributes:
                          type: object
                          properties:
                            content:
                              type: string
                              example: '<span>It is mine comment</span>'
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /pageComments/00000000-0000-0000-0000-000000000001
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - 'Page comments'
      security: []
    post:
      summary: 'Create Page comment'
      operationId: createPageComment
      description: 'Create a new Page comment.'
      parameters:
        -
          in: query
          name: 'fields[pageComments]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
          example: 'user,page'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`, `page`"
            example: 'user,page'
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pageComments
                    id: 00000000-0000-0000-0000-000000000001
                    attributes:
                      content: '<span>It is mine comment</span>'
                    links:
                      self: /pageComments/00000000-0000-0000-0000-000000000001
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pageComments
                      id:
                        type: string
                        example: 00000000-0000-0000-0000-000000000001
                      attributes:
                        type: object
                        properties:
                          content:
                            type: string
                            example: '<span>It is mine comment</span>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pageComments/00000000-0000-0000-0000-000000000001
      tags:
        - 'Page comments'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        content:
                          type: string
                          description: 'Must not be greater than 1023 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
                        page:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Pages.'
                              example:
                                id: '1'
                                type: pages
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
  '/pages/{id}':
    get:
      summary: 'Show Page'
      operationId: showPage
      description: 'Retrieve a specific Page by ID.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pages
                    id: '1'
                    attributes:
                      title: 'JSON:API standard'
                      content: '<strong>JSON:API</strong>'
                    links:
                      self: /pages/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pages
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'JSON:API standard'
                          content:
                            type: string
                            example: '<strong>JSON:API</strong>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pages/1
      tags:
        - Pages
      security: []
    patch:
      summary: 'Update Page'
      operationId: updatePage
      description: 'Update a specific Page by ID.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pages
                    id: '1'
                    attributes:
                      title: 'JSON:API standard'
                      content: '<strong>JSON:API</strong>'
                    links:
                      self: /pages/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pages
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'JSON:API standard'
                          content:
                            type: string
                            example: '<strong>JSON:API</strong>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pages/1
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        title:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                        content:
                          type: string
                          description: ''
                          example: consequatur
                          nullable: true
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
                        pageComments:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Page comments.'
                              example:
                                id: '1'
                                type: pageComments
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
    delete:
      summary: 'Delete Page'
      operationId: deletePage
      description: 'Delete a specific Page by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Pages
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pages' resource"
        example: 1
        required: true
        schema:
          type: number
  '/pages/{id}/relationships/user':
    patch:
      summary: 'Update User relationship'
      operationId: updateUserRelationship
      description: 'Update the related User identifier for a specific Page.'
      parameters: []
      responses: {  }
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'The resource identifier for a Users.'
                  example:
                    id: '1'
                    type: users
                  nullable: false
                  properties: {  }
              required:
                - data
      security: []
    get:
      summary: 'Show User relationship'
      operationId: showUserRelationship
      description: 'Retrieve the identifier of the related User for a specific Page.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - Pages
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the page.'
        example: consequatur
        required: true
        schema:
          type: string
  /pages:
    get:
      summary: 'List Pages'
      operationId: listPages
      description: 'Retrieve a list of Pages.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `title`, `content`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: pages
                      id: '1'
                      attributes:
                        title: 'JSON:API standard'
                        content: '<strong>JSON:API</strong>'
                      links:
                        self: /pages/1
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: pages
                        id: '1'
                        attributes:
                          title: 'JSON:API standard'
                          content: '<strong>JSON:API</strong>'
                        links:
                          self: /pages/1
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: pages
                        id:
                          type: string
                          example: '1'
                        attributes:
                          type: object
                          properties:
                            title:
                              type: string
                              example: 'JSON:API standard'
                            content:
                              type: string
                              example: '<strong>JSON:API</strong>'
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /pages/1
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'pages?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Pages
      security: []
    post:
      summary: 'Create Page'
      operationId: createPage
      description: 'Create a new Page.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: pages
                    id: '1'
                    attributes:
                      title: 'JSON:API standard'
                      content: '<strong>JSON:API</strong>'
                    links:
                      self: /pages/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: pages
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'JSON:API standard'
                          content:
                            type: string
                            example: '<strong>JSON:API</strong>'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /pages/1
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        title:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                        content:
                          type: string
                          description: ''
                          example: consequatur
                          nullable: true
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
                        pageComments:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Page comments.'
                              example:
                                id: '1'
                                type: pageComments
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
  '/pages/{id}/user':
    get:
      summary: 'Show related User'
      operationId: showRelatedUser
      description: 'Retrieve the related User for a specific Page.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - Pages
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pages' resource"
        example: 1
        required: true
        schema:
          type: number
  '/pages/{id}/pageComments':
    get:
      summary: 'List related Page comments'
      operationId: listRelatedPageComments
      description: 'Retrieve the list of related Page comments for a specific Page.'
      parameters:
        -
          in: query
          name: 'fields[pages]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `title`, `content`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          attributes:
                            content: '<span>It is mine comment</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          attributes:
                            content: '<span>I know better</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          attributes:
                            content: '<span>I think he is right</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            attributes:
                              content: '<span>It is mine comment</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            attributes:
                              content: '<span>I know better</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            attributes:
                              content: '<span>I think he is right</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            attributes:
                              type: object
                              properties:
                                content:
                                  type: string
                                  example: '<span>It is mine comment</span>'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          attributes:
                            content: '<span>It is mine comment</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          attributes:
                            content: '<span>I know better</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          attributes:
                            content: '<span>I think he is right</span>'
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            attributes:
                              content: '<span>It is mine comment</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            attributes:
                              content: '<span>I know better</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            attributes:
                              content: '<span>I think he is right</span>'
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            attributes:
                              type: object
                              properties:
                                content:
                                  type: string
                                  example: '<span>It is mine comment</span>'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Pages
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pages' resource"
        example: 1
        required: true
        schema:
          type: number
  '/pages/{id}/relationships/pageComments':
    get:
      summary: 'Show Page comments relationships'
      operationId: showPageCommentsRelationships
      description: 'Retrieve the identifiers of the related Page comments for a specific Page.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Pages
      security: []
    post:
      summary: 'Add to Page comments relationships'
      operationId: addToPageCommentsRelationships
      description: 'Add identifiers to the Page comments relationship of a specific Page.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Page comments.'
                  example:
                    -
                      id: '1'
                      type: pageComments
                  items:
                    type: object
              required:
                - data
      security: []
    patch:
      summary: 'Update Page comments relationships'
      operationId: updatePageCommentsRelationships
      description: 'Replace all identifiers in the Page comments relationship of a specific Page.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000001
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000001
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000002
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000002
                        -
                          type: pageComments
                          id: 00000000-0000-0000-0000-000000000003
                          links:
                            self: /pageComments/00000000-0000-0000-0000-000000000003
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000001
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000001
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000002
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000002
                          -
                            type: pageComments
                            id: 00000000-0000-0000-0000-000000000003
                            links:
                              self: /pageComments/00000000-0000-0000-0000-000000000003
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: pageComments
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000001
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /pageComments/00000000-0000-0000-0000-000000000001
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'pageComments?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Page comments.'
                  example:
                    -
                      id: '1'
                      type: pageComments
                  items:
                    type: object
              required:
                - data
      security: []
    delete:
      summary: 'Remove from Page comments relationships'
      operationId: removeFromPageCommentsRelationships
      description: 'Remove identifiers from the Page comments relationship of a specific Page.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Pages
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Page comments.'
                  example:
                    -
                      id: '1'
                      type: pageComments
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'pages' resource"
        example: 1
        required: true
        schema:
          type: number
  /roles:
    get:
      summary: 'List Roles'
      operationId: listRoles
      description: 'Retrieve a list of Roles.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: roles
                      id: '1'
                      attributes:
                        name: Root
                      links:
                        self: /roles/1
                    -
                      type: roles
                      id: '2'
                      attributes:
                        name: User
                      links:
                        self: /roles/2
                    -
                      type: roles
                      id: '3'
                      attributes:
                        name: Moderator
                      links:
                        self: /roles/3
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: roles
                        id: '1'
                        attributes:
                          name: Root
                        links:
                          self: /roles/1
                      -
                        type: roles
                        id: '2'
                        attributes:
                          name: User
                        links:
                          self: /roles/2
                      -
                        type: roles
                        id: '3'
                        attributes:
                          name: Moderator
                        links:
                          self: /roles/3
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: roles
                        id:
                          type: string
                          example: '1'
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Root
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /roles/1
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      security: []
    post:
      summary: 'Create Role'
      operationId: createRole
      description: 'Create a new Role.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: Root
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Root
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                        permissions:
                          type: object
                          description: ''
                          example: null
                          nullable: false
                          properties: {  }
              required:
                - data
      security: []
  '/roles/{id}':
    get:
      summary: 'Show Role'
      operationId: showRole
      description: 'Retrieve a specific Role by ID.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: Root
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Root
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      security: []
    patch:
      summary: 'Update Role'
      operationId: updateRole
      description: 'Update a specific Role by ID.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: Root
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Root
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: false
                        permissions:
                          type: object
                          description: ''
                          example: null
                          nullable: false
                          properties: {  }
              required:
                - data
      security: []
    delete:
      summary: 'Delete Role'
      operationId: deleteRole
      description: 'Delete a specific Role by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Roles
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'roles' resource"
        example: 1
        required: true
        schema:
          type: number
  /userConfigs:
    get:
      summary: 'List User configs'
      operationId: listUserConfigs
      description: 'Retrieve a list of User configs.'
      parameters:
        -
          in: query
          name: 'fields[userConfigs]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: userConfigs
                      id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        theme: light
                        notificationsEnabled: true
                        language: en
                      links:
                        self: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    -
                      type: userConfigs
                      id: f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                      attributes:
                        theme: light
                        notificationsEnabled: true
                        language: en
                      links:
                        self: /userConfigs/f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                    -
                      type: userConfigs
                      id: ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                      attributes:
                        theme: light
                        notificationsEnabled: true
                        language: en
                      links:
                        self: /userConfigs/ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: userConfigs
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          theme: light
                          notificationsEnabled: true
                          language: en
                        links:
                          self: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      -
                        type: userConfigs
                        id: f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                        attributes:
                          theme: light
                          notificationsEnabled: true
                          language: en
                        links:
                          self: /userConfigs/f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                      -
                        type: userConfigs
                        id: ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                        attributes:
                          theme: light
                          notificationsEnabled: true
                          language: en
                        links:
                          self: /userConfigs/ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: userConfigs
                        id:
                          type: string
                          example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          type: object
                          properties:
                            theme:
                              type: string
                              example: light
                            notificationsEnabled:
                              type: boolean
                              example: true
                            language:
                              type: string
                              example: en
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'userConfigs?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - 'User configs'
      security: []
    post:
      summary: 'Create User config'
      operationId: createUserConfig
      description: 'Create a new User config.'
      parameters:
        -
          in: query
          name: 'fields[userConfigs]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userConfigs
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      theme: light
                      notificationsEnabled: true
                      language: en
                    links:
                      self: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userConfigs
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          theme:
                            type: string
                            example: light
                          notificationsEnabled:
                            type: boolean
                            example: true
                          language:
                            type: string
                            example: en
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        theme:
                          type: string
                          description: 'Must not be greater than 50 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: true
                        notificationsEnabled:
                          type: boolean
                          description: ''
                          example: false
                          nullable: false
                        language:
                          type: string
                          description: 'Must not be greater than 10 characters.'
                          example: amniihfqc
                          nullable: true
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
  '/userConfigs/{id}':
    get:
      summary: 'Show User config'
      operationId: showUserConfig
      description: 'Retrieve a specific User config by ID.'
      parameters:
        -
          in: query
          name: 'fields[userConfigs]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userConfigs
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      theme: light
                      notificationsEnabled: true
                      language: en
                    links:
                      self: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userConfigs
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          theme:
                            type: string
                            example: light
                          notificationsEnabled:
                            type: boolean
                            example: true
                          language:
                            type: string
                            example: en
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      security: []
    patch:
      summary: 'Update User config'
      operationId: updateUserConfig
      description: 'Update a specific User config by ID.'
      parameters:
        -
          in: query
          name: 'fields[userConfigs]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userConfigs
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      theme: light
                      notificationsEnabled: true
                      language: en
                    links:
                      self: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userConfigs
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          theme:
                            type: string
                            example: light
                          notificationsEnabled:
                            type: boolean
                            example: true
                          language:
                            type: string
                            example: en
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userConfigs/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        theme:
                          type: string
                          description: 'Must not be greater than 50 characters.'
                          example: vmqeopfuudtdsufvyvddq
                          nullable: true
                        notificationsEnabled:
                          type: boolean
                          description: ''
                          example: true
                          nullable: false
                        language:
                          type: string
                          description: 'Must not be greater than 10 characters.'
                          example: amniihfqc
                          nullable: true
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
    delete:
      summary: 'Delete User config'
      operationId: deleteUserConfig
      description: 'Delete a specific User config by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User configs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'userConfigs' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/userConfigs/{id}/user':
    get:
      summary: 'Show related User'
      operationId: showRelatedUser
      description: 'Retrieve the related User for a specific User config.'
      parameters:
        -
          in: query
          name: 'fields[userConfigs]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `theme`, `notificationsEnabled`, `language`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
          example: user
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `user`"
            example: user
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'testing user1'
                              email:
                                type: string
                                example: test1email@test.com
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'userConfigs' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/userConfigs/{id}/relationships/user':
    get:
      summary: 'Show User relationship'
      operationId: showUserRelationship
      description: 'Retrieve the identifier of the related User for a specific User config.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      security: []
    patch:
      summary: 'Update User relationship'
      operationId: updateUserRelationship
      description: 'Update the related User identifier for a specific User config.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: users
                          id:
                            type: string
                            example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - 'User configs'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Users.'
                  example:
                    -
                      id: '1'
                      type: users
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'userConfigs' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  /users:
    post:
      summary: 'Create User'
      operationId: createUser
      description: 'Create a new User.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      name: 'testing user1'
                      email: test1email@test.com
                    links:
                      self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'testing user1'
                          email:
                            type: string
                            example: test1email@test.com
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: ''
                          example: consequatur
                          nullable: false
                        password:
                          type: string
                          description: ''
                          example: consequatur
                          nullable: false
                        email:
                          type: string
                          description: 'Must be a valid email address.'
                          example: carolyne.luettgen@example.org
                          nullable: false
                      required:
                        - name
                        - password
                        - email
      security: []
    get:
      summary: 'List Users'
      operationId: listUsers
      description: 'Retrieve a list of Users.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: 'meta[users]'
          description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
          example: random
          required: false
          schema:
            type: string
            description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
            example: random
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
          example: 'status,roles'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
            example: 'status,roles'
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: filter
          description: "Search filter uses `contains` operator on `email` attribute.\n\nIf you want to use search filter and other filters at the same time, use `filter[search]=text`"
          required: false
          schema:
            type: string
            description: "Search filter uses `contains` operator on `email` attribute.\n\nIf you want to use search filter and other filters at the same time, use `filter[search]=text`"
            nullable: false
        -
          in: query
          name: 'filter[id]'
          description: "Filter by `id` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[id]=example`\n- Between: `filter[id][start]=10&filter[id][end]=20`\n- Operator: `filter[id][operator]=gt&filter[id][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
          required: false
          schema:
            type: string
            description: "Filter by `id` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[id]=example`\n- Between: `filter[id][start]=10&filter[id][end]=20`\n- Operator: `filter[id][operator]=gt&filter[id][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
            nullable: false
        -
          in: query
          name: 'filter[email]'
          description: "Filter by `email` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[email]=example`\n- Between: `filter[email][start]=10&filter[email][end]=20`\n- Operator: `filter[email][operator]=gt&filter[email][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
          required: false
          schema:
            type: string
            description: "Filter by `email` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[email]=example`\n- Between: `filter[email][start]=10&filter[email][end]=20`\n- Operator: `filter[email][operator]=gt&filter[email][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
            nullable: false
        -
          in: query
          name: 'filter[name]'
          description: "Filter by `name` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[name]=example`\n- Between: `filter[name][start]=10&filter[name][end]=20`\n- Operator: `filter[name][operator]=gt&filter[name][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
          required: false
          schema:
            type: string
            description: "Filter by `name` attribute.\n\n<details>\n<summary>Full details</summary>\n\n- Equal: `filter[name]=example`\n- Between: `filter[name][start]=10&filter[name][end]=20`\n- Operator: `filter[name][operator]=gt&filter[name][value]=100`\n\n**Operators:** `eq`, `gt`, `gte`, `lt`, `lte`, `neq`, `in`, `notIn`, `contains`, `startsWith`, `endsWith`\n\n</details>"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: users
                      id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        name: 'testing user1'
                        email: test1email@test.com
                      links:
                        self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    -
                      type: users
                      id: f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                      attributes:
                        name: 'testing user2'
                        email: test2email@gmail.com
                      links:
                        self: /users/f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                    -
                      type: users
                      id: ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                      attributes:
                        name: 'testing user3'
                        email: test3email@test.com
                      links:
                        self: /users/ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: users
                        id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          name: 'testing user1'
                          email: test1email@test.com
                        links:
                          self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      -
                        type: users
                        id: f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                        attributes:
                          name: 'testing user2'
                          email: test2email@gmail.com
                        links:
                          self: /users/f1d2f365-e9aa-4844-8eb7-36e0df7a396d
                      -
                        type: users
                        id: ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                        attributes:
                          name: 'testing user3'
                          email: test3email@test.com
                        links:
                          self: /users/ccf660b9-3cf7-4f58-a5f7-22e53ad836f8
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: users
                        id:
                          type: string
                          example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: 'testing user1'
                            email:
                              type: string
                              example: test1email@test.com
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
  '/users/{id}':
    patch:
      summary: 'Update User'
      operationId: updateUser
      description: 'Update a specific User by ID.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      name: 'testing user1'
                      email: test1email@test.com
                    links:
                      self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'testing user1'
                          email:
                            type: string
                            example: test1email@test.com
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: ''
                          example: consequatur
                          nullable: false
                        email:
                          type: string
                          description: 'Must be a valid email address.'
                          example: carolyne.luettgen@example.org
                          nullable: false
                        password:
                          type: string
                          description: ''
                          example: 'O[2UZ5ij-e/dl4m{o,'
                          nullable: false
                      required:
                        - name
                        - email
                        - password
                    relationships:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        status:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a User statuses.'
                              example: []
                              nullable: false
                              properties: {  }
                          required:
                            - data
                        roles:
                          type: object
                          description: ''
                          example: []
                          nullable: false
                          properties:
                            data:
                              type: array
                              description: 'The resource identifier for a Roles.'
                              example:
                                -
                                  id: '1'
                                  type: roles
                              items:
                                type: object
                          required:
                            - data
      security: []
    get:
      summary: 'Show User'
      operationId: showUser
      description: 'Retrieve a specific User by ID.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: 'meta[users]'
          description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
          example: random
          required: false
          schema:
            type: string
            description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
            example: random
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
          example: 'status,roles'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
            example: 'status,roles'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                    attributes:
                      name: 'testing user1'
                      email: test1email@test.com
                    links:
                      self: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: 8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'testing user1'
                          email:
                            type: string
                            example: test1email@test.com
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/8a41dde6-b1f5-4c40-a12d-d96c6d9ef90b
      tags:
        - Users
      security: []
    delete:
      summary: 'Delete User'
      operationId: deleteUser
      description: 'Delete a specific User by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: consequatur
        required: true
        schema:
          type: string
  '/users/{id}/relationships/roles':
    post:
      summary: 'Add to Roles relationships'
      operationId: addToRolesRelationships
      description: 'Add identifiers to the Roles relationship of a specific User.'
      parameters: []
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    delete:
      summary: 'Remove from Roles relationships'
      operationId: removeFromRolesRelationships
      description: 'Remove identifiers from the Roles relationship of a specific User.'
      parameters: []
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    patch:
      summary: 'Update Roles relationships'
      operationId: updateRolesRelationships
      description: 'Replace all identifiers in the Roles relationship of a specific User.'
      parameters: []
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    get:
      summary: 'Show Roles relationships'
      operationId: showRolesRelationships
      description: 'Retrieve the identifiers of the related Roles for a specific User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: consequatur
        required: true
        schema:
          type: string
  '/users/{id}/status':
    get:
      summary: 'Show related Status'
      operationId: showRelatedStatus
      description: 'Retrieve the related Status for a specific User.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: 'meta[users]'
          description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
          example: random
          required: false
          schema:
            type: string
            description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
            example: random
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
          example: 'status,roles'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
            example: 'status,roles'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        attributes:
                          name: Active
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: Active
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        attributes:
                          name: Active
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          attributes:
                            type: object
                            properties:
                              name:
                                type: string
                                example: Active
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/users/{id}/roles':
    get:
      summary: 'List related Roles'
      operationId: listRelatedRoles
      description: 'Retrieve the list of related Roles for a specific User.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: 'meta[users]'
          description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
          example: random
          required: false
          schema:
            type: string
            description: "Additional metadata to be included with the response by resource type.\n\n**Available meta fields:** `random`"
            example: random
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
          example: 'status,roles'
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `status`, `roles`"
            example: 'status,roles'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          attributes:
                            name: Root
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          attributes:
                            name: User
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          attributes:
                            name: Moderator
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            attributes:
                              name: Root
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            attributes:
                              name: User
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            attributes:
                              name: Moderator
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: Root
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          attributes:
                            name: Root
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          attributes:
                            name: User
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          attributes:
                            name: Moderator
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            attributes:
                              name: Root
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            attributes:
                              name: User
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            attributes:
                              name: Moderator
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: Root
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  '/users/{id}/relationships/status':
    get:
      summary: 'Show Status relationship'
      operationId: showStatusRelationship
      description: 'Retrieve the identifier of the related Status for a specific User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
      tags:
        - Users
      security: []
    patch:
      summary: 'Update Status relationship'
      operationId: updateStatusRelationship
      description: 'Update the related Status identifier for a specific User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        type: userStatuses
                        id: '1'
                        links:
                          self: /userStatuses/1
                    properties:
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: userStatuses
                          id:
                            type: string
                            example: '1'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /userStatuses/1
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a User statuses.'
                  example:
                    -
                      id: '1'
                      type: userStatuses
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
  /userStatuses:
    get:
      summary: 'List User statuses'
      operationId: listUserStatuses
      description: 'Retrieve a list of User statuses.'
      parameters:
        -
          in: query
          name: 'fields[userStatuses]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: userStatuses
                      id: '1'
                      attributes:
                        name: Active
                      links:
                        self: /userStatuses/1
                    -
                      type: userStatuses
                      id: '2'
                      attributes:
                        name: Inactive
                      links:
                        self: /userStatuses/2
                    -
                      type: userStatuses
                      id: '3'
                      attributes:
                        name: Deleted
                      links:
                        self: /userStatuses/3
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: userStatuses
                        id: '1'
                        attributes:
                          name: Active
                        links:
                          self: /userStatuses/1
                      -
                        type: userStatuses
                        id: '2'
                        attributes:
                          name: Inactive
                        links:
                          self: /userStatuses/2
                      -
                        type: userStatuses
                        id: '3'
                        attributes:
                          name: Deleted
                        links:
                          self: /userStatuses/3
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: userStatuses
                        id:
                          type: string
                          example: '1'
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Active
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /userStatuses/1
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'userStatuses?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - 'User statuses'
      security: []
    post:
      summary: 'Create User status'
      operationId: createUserStatus
      description: 'Create a new User status.'
      parameters:
        -
          in: query
          name: 'fields[userStatuses]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userStatuses
                    id: '1'
                    attributes:
                      name: Active
                    links:
                      self: /userStatuses/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userStatuses
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Active
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userStatuses/1
      tags:
        - 'User statuses'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 16 characters.'
                          example: vmqeopfuudtds
                          nullable: false
              required:
                - data
      security: []
  '/userStatuses/{id}':
    get:
      summary: 'Show User status'
      operationId: showUserStatus
      description: 'Retrieve a specific User status by ID.'
      parameters:
        -
          in: query
          name: 'fields[userStatuses]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userStatuses
                    id: '1'
                    attributes:
                      name: Active
                    links:
                      self: /userStatuses/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userStatuses
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Active
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userStatuses/1
      tags:
        - 'User statuses'
      security: []
    patch:
      summary: 'Update User status'
      operationId: updateUserStatus
      description: 'Update a specific User status by ID.'
      parameters:
        -
          in: query
          name: 'fields[userStatuses]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`"
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: userStatuses
                    id: '1'
                    attributes:
                      name: Active
                    links:
                      self: /userStatuses/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: userStatuses
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Active
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /userStatuses/1
      tags:
        - 'User statuses'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 16 characters.'
                          example: vmqeopfuudtds
                          nullable: false
              required:
                - data
      security: []
    delete:
      summary: 'Delete User status'
      operationId: deleteUserStatus
      description: 'Delete a specific User status by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'User statuses'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'userStatuses' resource"
        example: 12345678-1234-1234-1234-123456789012
        required: true
        schema:
          type: string
