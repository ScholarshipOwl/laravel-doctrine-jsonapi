<?php

namespace Tests\Scribe;

use Tests\TestCase;
use Sowl\JsonApi\Scribe\RouteMatcher;

class RouteMatcherTest extends TestCase
{
    protected RouteMatcher $routeMatcher;
    protected array $routes;
    protected array $routesByMethodUri;

    protected function setUp(): void
    {
        parent::setUp();

        $this->routeMatcher = app(RouteMatcher::class);
        $this->routes = $this->routeMatcher->getRoutes([
            [
                'match' => [
                    'prefixes' => ['*'],
                    'domains' => ['*'],
                    'versions' => ['v1'],
                ],
                'include' => [],
                'exclude' => [],
            ],
        ]);

        // Create more usable route mappings
        $this->routesByMethodUri = [];
        foreach ($this->routes as $route) {
            $uri = $route->getRoute()->uri();
            $methods = $route->getRoute()->methods();
            foreach ($methods as $method) {
                if (!isset($this->routesByMethodUri[$method])) {
                    $this->routesByMethodUri[$method] = [];
                }
                $this->routesByMethodUri[$method][$uri] = $route;
            }
        }
    }

    /**
     * Helper method to assert that a route exists and supports a specific HTTP method
     */
    protected function assertRouteExists(string $method, string $uri): void
    {
        $this->assertTrue(isset($this->routesByMethodUri[$method][$uri]), "Route not found: $method $uri");
    }

    /**
     * Test that routes with {resourceType} placeholders are properly expanded
     * into concrete resource types.
     */
    public function testExpandsResourceTypePlaceholders(): void
    {
        // 1. No route should contain an unexpanded {resourceType} placeholder
        $allUris = [];
        foreach ($this->routesByMethodUri as $routes) {
            $allUris = array_merge($allUris, array_keys($routes));
        }
        $allUris = array_unique($allUris);

        foreach ($allUris as $uri) {
            $this->assertStringNotContainsString(
                '{resourceType}',
                $uri,
                "Route contains unexpanded {resourceType}: $uri"
            );
        }
    }

    /**
     * Test that routes with {relationship} placeholders are properly expanded
     */
    public function testExpandsRelationshipPlaceholders(): void
    {
        // 1. No route should contain an unexpanded {relationship} placeholder
        $allUris = [];
        foreach ($this->routesByMethodUri as $routes) {
            $allUris = array_merge($allUris, array_keys($routes));
        }
        $allUris = array_unique($allUris);

        foreach ($allUris as $uri) {
            $this->assertStringNotContainsString(
                '{relationship}',
                $uri,
                "Route contains unexpanded {relationship}: $uri"
            );
        }
    }

    /**
     * Complete list of all endpoints that should be generated by the RouteMatcher
     */
    public function testCompleteEndpointList(): void
    {
        // Single resource endpoints
        $this->assertRouteExists('GET', 'pages');
        $this->assertRouteExists('POST', 'pages');
        $this->assertRouteExists('GET', 'pages/{id}');
        $this->assertRouteExists('PATCH', 'pages/{id}');
        $this->assertRouteExists('DELETE', 'pages/{id}');

        $this->assertRouteExists('GET', 'pageComments');
        $this->assertRouteExists('POST', 'pageComments');
        $this->assertRouteExists('GET', 'pageComments/{id}');
        $this->assertRouteExists('PATCH', 'pageComments/{id}');
        $this->assertRouteExists('DELETE', 'pageComments/{id}');

        $this->assertRouteExists('GET', 'users');
        $this->assertRouteExists('POST', 'users');
        $this->assertRouteExists('GET', 'users/{id}');
        $this->assertRouteExists('PATCH', 'users/{id}');
        $this->assertRouteExists('DELETE', 'users/{id}');

        $this->assertRouteExists('GET', 'roles');
        $this->assertRouteExists('POST', 'roles');
        $this->assertRouteExists('GET', 'roles/{id}');
        $this->assertRouteExists('PATCH', 'roles/{id}');
        $this->assertRouteExists('DELETE', 'roles/{id}');

        $this->assertRouteExists('GET', 'userStatuses');
        $this->assertRouteExists('POST', 'userStatuses');
        $this->assertRouteExists('GET', 'userStatuses/{id}');
        $this->assertRouteExists('PATCH', 'userStatuses/{id}');
        $this->assertRouteExists('DELETE', 'userStatuses/{id}');

        // Related resource endpoints
        $this->assertRouteExists('GET', 'pages/{id}/user');
        $this->assertRouteExists('GET', 'pages/{id}/pageComments');

        $this->assertRouteExists('GET', 'pageComments/{id}/user');
        $this->assertRouteExists('GET', 'pageComments/{id}/page');

        $this->assertRouteExists('GET', 'users/{id}/roles');
        $this->assertRouteExists('GET', 'users/{id}/status');

        // To-one relationship endpoints
        $this->assertRouteExists('GET', 'pages/{id}/relationships/user');
        $this->assertRouteExists('PATCH', 'pages/{id}/relationships/user');

        $this->assertRouteExists('GET', 'pageComments/{id}/relationships/user');
        $this->assertRouteExists('PATCH', 'pageComments/{id}/relationships/user');
        $this->assertRouteExists('GET', 'pageComments/{id}/relationships/page');
        $this->assertRouteExists('PATCH', 'pageComments/{id}/relationships/page');

        $this->assertRouteExists('GET', 'users/{id}/relationships/status');
        $this->assertRouteExists('PATCH', 'users/{id}/relationships/status');

        // To-many relationship endpoints
        $this->assertRouteExists('GET', 'pages/{id}/relationships/pageComments');
        $this->assertRouteExists('POST', 'pages/{id}/relationships/pageComments');
        $this->assertRouteExists('PATCH', 'pages/{id}/relationships/pageComments');
        $this->assertRouteExists('DELETE', 'pages/{id}/relationships/pageComments');

        $this->assertRouteExists('GET', 'users/{id}/relationships/roles');
        $this->assertRouteExists('POST', 'users/{id}/relationships/roles');
        $this->assertRouteExists('PATCH', 'users/{id}/relationships/roles');
        $this->assertRouteExists('DELETE', 'users/{id}/relationships/roles');
    }

    /**
     * Test that there are no duplicate routes in the route collection
     */
    public function testNoDuplicateRoutes(): void
    {
        // Get all routes as method + uri combinations
        $routeSignatures = [];
        foreach ($this->routes as $route) {
            $uri = $route->getRoute()->uri();
            $methods = $route->getRoute()->methods();

            foreach ($methods as $method) {
                $signature = "$method $uri";
                if (isset($routeSignatures[$signature])) {
                    $this->fail("Duplicate route found: $signature");
                }
                $routeSignatures[$signature] = true;
            }
        }

        // Count unique routes
        $uniqueRouteCount = count($routeSignatures);
        $totalRouteCount = 0;

        // Count total method + uri combinations
        foreach ($this->routes as $route) {
            $totalRouteCount += count($route->getRoute()->methods());
        }

        // Assert that the counts match
        $this->assertEquals(
            $uniqueRouteCount,
            $totalRouteCount,
            "Expected $uniqueRouteCount unique routes, but found $totalRouteCount total routes"
        );
    }
}
