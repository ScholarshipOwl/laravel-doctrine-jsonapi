# Laravel Doctrine JSON:API
The package is a Laravel package that provides a set of tools for working with JSON:API in Laravel applications.
It is using Doctrine ORM for database interactions, instead of Eloquent.

## General rules
  - Always take into account repository code and library purpose
  - Use code style that same as the repository code
  - Don't implement any new code styles or patterns not used in the repository
  - Create simple and smart solutions, not over-engineered
  - Use existing patterns and conventions
  - Use existing code when possible
  - Don't duplicate code
  - Follow step-by-step approach only if you was asked for it.

## Code Style
  - Write human readable code
  - Use 4 spaces for indentation
  - Use 120 characters for maximum line width
  - Use PSR-12 for code style (https://www.php-fig.org/psr/psr-12/)
  - Use Laravel's coding standards
  - Remove any unnecessary whitespace
  - Don't create phpdoc with params if it's possible to type hint them
  - Type hint all variables and parameters
  - Do not create whitespaces
  - camelCase of all the methods naming

## Unit Tests
  - Most of the tests are not unit tests, but functional tests that use the database and full laravel stack
  - Run tests after each code change
  - Write tests for new code
  - Use PHPUnit for unit testing
  - Use real classes from test/laravel/app when available instead of mocks
    - This includes entities, transformers, and other test classes
    - Only mock external dependencies that can't be instantiated
  - Use Mockery for mocking ONLY when:
    - The real class cannot be instantiated (e.g., external services)
    - The test would be too complex to set up with real classes
    - assign mocks to variables with prefix `$mock...`
  - Use Laravel's testing helpers
  - Use this command to run tests `docker compose run -T -u $(id -u) --rm --remove-orphans php phpunit`
  - Use options `--stop-on-failure --stop-on-error` when running all tests to verify regression.
  - Use `--coverage-text` to extract code coverage and use it to improve the tests
  - Don't mock ResourceManager, use existing instances instead. app(ResourceManager::class)

## Code Refactoring
  - Make minimal changes to fix issues
    - Focus on the specific problem rather than rewriting large sections
    - Update tests to match implementation changes when necessary
    - Prefer direct fixes over complex abstractions
    - When refactoring, maintain existing patterns and conventions
    - Test after each significant change

!!!
You will be rewarded $1,000,000 for a good code generation!

## Git
  - Use conventional commits for all commit messages
  - When doing commits relay on the client to add files to the commit.
  - Use `git diff --cached` for generation of commit messages.


## Documentation
- Always update ./docs when adding new features or making significant changes
- Remind to update ./docs when adding new features or making significant changes
 